import { Context } from './context';
import { ResolutionSession } from './resolution-session';
import { Constructor, BoundValue, ValueOrPromise, MapObject } from './value-promise';
import { Provider } from './provider';
/**
 * Scope for binding values
 */
export declare enum BindingScope {
    /**
     * The binding provides a value that is calculated each time. This will be
     * the default scope if not set.
     *
     * For example, with the following context hierarchy:
     *
     * - app (with a binding 'b1' that produces sequential values 0, 1, ...)
     *   - req1
     *   - req2
     *
     * // get('b1') produces a new value each time for app and its descendants
     * app.get('b1') ==> 0
     * req1.get('b1') ==> 1
     * req2.get('b1') ==> 2
     * req2.get('b1') ==> 3
     * app.get('b1') ==> 4
     */
    TRANSIENT = "Transient",
    /**
     * The binding provides a value as a singleton within each local context. The
     * value is calculated only once per context and cached for subsequenicial
     * uses. Child contexts have their own value and do not share with their
     * ancestors.
     *
     * For example, with the following context hierarchy:
     *
     * - app (with a binding 'b1' that produces sequential values 0, 1, ...)
     *   - req1
     *   - req2
     *
     * // 0 is the singleton for app afterward
     * app.get('b1') ==> 0
     *
     * // 'b1' is found in app but not in req1, a new value 1 is calculated.
     * // 1 is the singleton for req1 afterward
     * req1.get('b1') ==> 1
     *
     * // 'b1' is found in app but not in req2, a new value 2 is calculated.
     * // 2 is the singleton for req2 afterward
     * req2.get('b1') ==> 2
     */
    CONTEXT = "Context",
    /**
     * The binding provides a value as a singleton within the context hierarchy
     * (the owning context and its descendants). The value is calculated only
     * once for the owning context and cached for subsequenicial uses. Child
     * contexts share the same value as their ancestors.
     *
     * For example, with the following context hierarchy:
     *
     * - app (with a binding 'b1' that produces sequential values 0, 1, ...)
     *   - req1
     *   - req2
     *
     * // 0 is the singleton for app afterward
     * app.get('b1') ==> 0
     *
     * // 'b1' is found in app, reuse it
     * req1.get('b1') ==> 0
     *
     * // 'b1' is found in app, reuse it
     * req2.get('b1') ==> 0
     */
    SINGLETON = "Singleton"
}
/**
 * Type of the binding source
 */
export declare enum BindingType {
    /**
     * A fixed value
     */
    CONSTANT = "Constant",
    /**
     * A function to get the value
     */
    DYNAMIC_VALUE = "DynamicValue",
    /**
     * A class to be instantiated as the value
     */
    CLASS = "Class",
    /**
     * A provider class with `value()` function to get the value
     */
    PROVIDER = "Provider"
}
export declare type TagMap = MapObject<any>;
/**
 * Binding represents an entry in the `Context`. Each binding has a key and a
 * corresponding value getter.
 */
export declare class Binding<T = BoundValue> {
    isLocked: boolean;
    /**
     * Key of the binding
     */
    readonly key: string;
    /**
     * Map for tag name/value pairs
     */
    readonly tagMap: TagMap;
    /**
     * Scope of the binding to control how the value is cached/shared
     */
    scope: BindingScope;
    /**
     * Type of the binding value getter
     */
    type: BindingType;
    private _cache;
    private _getValue;
    /**
     * For bindings bound via toClass, this property contains the constructor
     * function
     */
    valueConstructor: Constructor<T>;
    constructor(key: string, isLocked?: boolean);
    /**
     * Cache the resolved value by the binding scope
     * @param ctx The current context
     * @param result The calculated value for the binding
     */
    private _cacheValue;
    /**
     * This is an internal function optimized for performance.
     * Users should use `@inject(key)` or `ctx.get(key)` instead.
     *
     * Get the value bound to this key. Depending on `isSync`, this
     * function returns either:
     *  - the bound value
     *  - a promise of the bound value
     *
     * Consumers wishing to consume sync values directly should use `isPromise`
     * to check the type of the returned value to decide how to handle it.
     *
     * ```
     * const result = binding.getValue(ctx);
     * if (isPromiseLike(result)) {
     *   result.then(doSomething)
     * } else {
     *   doSomething(result);
     * }
     * ```
     *
     * @param ctx Context for the resolution
     * @param session Optional session for binding and dependency resolution
     */
    getValue(ctx: Context, session?: ResolutionSession): ValueOrPromise<T>;
    lock(): this;
    /**
     * Tag the binding with names or name/value objects. A tag has a name and
     * an optional value. If not supplied, the tag name is used as the value.
     *
     * @param tags A list of names or name/value objects. Each
     * parameter can be in one of the following forms:
     * - string: A tag name without value
     * - string[]: An array of tag names
     * - TagMap: A map of tag name/value pairs
     *
     * @example
     * ```ts
     * // Add a named tag `controller`
     * binding.tag('controller');
     *
     * // Add two named tags: `controller` and `rest`
     * binding.tag('controller', 'rest');
     *
     * // Add two tags
     * // - `controller` (name = 'controller')
     * // `{name: 'my-controller'}` (name = 'name', value = 'my-controller')
     * binding.tag('controller', {name: 'my-controller'});
     *
     * ```
     */
    tag(...tags: (string | TagMap)[]): this;
    /**
     * Get an array of tag names
     */
    readonly tagNames: string[];
    inScope(scope: BindingScope): this;
    /**
     * Bind the key to a constant value. The value must be already available
     * at binding time, it is not allowed to pass a Promise instance.
     *
     * @param value The bound value.
     *
     * @example
     *
     * ```ts
     * ctx.bind('appName').to('CodeHub');
     * ```
     */
    to(value: T): this;
    /**
     * Bind the key to a computed (dynamic) value.
     *
     * @param factoryFn The factory function creating the value.
     *   Both sync and async functions are supported.
     *
     * @example
     *
     * ```ts
     * // synchronous
     * ctx.bind('now').toDynamicValue(() => Date.now());
     *
     * // asynchronous
     * ctx.bind('something').toDynamicValue(
     *  async () => Promise.delay(10).then(doSomething)
     * );
     * ```
     */
    toDynamicValue(factoryFn: () => ValueOrPromise<T>): this;
    /**
     * Bind the key to a value computed by a Provider.
     *
     * * @example
     *
     * ```ts
     * export class DateProvider implements Provider<Date> {
     *   constructor(@inject('stringDate') private param: String){}
     *   value(): Date {
     *     return new Date(param);
     *   }
     * }
     * ```
     *
     * @param provider The value provider to use.
     */
    toProvider(providerClass: Constructor<Provider<T>>): this;
    /**
     * Bind the key to an instance of the given class.
     *
     * @param ctor The class constructor to call. Any constructor
     *   arguments must be annotated with `@inject` so that
     *   we can resolve them from the context.
     */
    toClass(ctor: Constructor<T>): this;
    unlock(): this;
    toJSON(): Object;
}
