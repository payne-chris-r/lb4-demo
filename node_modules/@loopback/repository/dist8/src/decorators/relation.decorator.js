"use strict";
// Copyright IBM Corp. 2017. All Rights Reserved.
// Node module: @loopback/repository
// This file is licensed under the MIT License.
// License text available at https://opensource.org/licenses/MIT
Object.defineProperty(exports, "__esModule", { value: true });
const context_1 = require("@loopback/context");
const model_decorator_1 = require("./model.decorator");
const lodash_1 = require("lodash");
// tslint:disable:no-any
var RelationType;
(function (RelationType) {
    RelationType["belongsTo"] = "belongsTo";
    RelationType["hasOne"] = "hasOne";
    RelationType["hasMany"] = "hasMany";
    RelationType["embedsOne"] = "embedsOne";
    RelationType["embedsMany"] = "embedsMany";
    RelationType["referencesOne"] = "referencesOne";
    RelationType["referencesMany"] = "referencesMany";
})(RelationType = exports.RelationType || (exports.RelationType = {}));
exports.RELATIONS_KEY = 'loopback:relations';
class RelationMetadata {
}
exports.RelationMetadata = RelationMetadata;
/**
 * Decorator for relations
 * @param definition
 * @returns {(target:any, key:string)}
 */
function relation(definition) {
    // Apply relation definition to the model class
    return context_1.PropertyDecoratorFactory.createDecorator(exports.RELATIONS_KEY, definition);
}
exports.relation = relation;
/**
 * Decorator for belongsTo
 * @param definition
 * @returns {(target:any, key:string)}
 */
function belongsTo(definition) {
    // Apply model definition to the model class
    const rel = Object.assign({ type: RelationType.belongsTo }, definition);
    return context_1.PropertyDecoratorFactory.createDecorator(exports.RELATIONS_KEY, rel);
}
exports.belongsTo = belongsTo;
/**
 * Decorator for hasOne
 * @param definition
 * @returns {(target:any, key:string)}
 */
function hasOne(definition) {
    const rel = Object.assign({ type: RelationType.hasOne }, definition);
    return context_1.PropertyDecoratorFactory.createDecorator(exports.RELATIONS_KEY, rel);
}
exports.hasOne = hasOne;
/**
 * Decorator for hasMany
 * Calls property.array decorator underneath the hood and infers foreign key
 * name from target model name unless explicitly specified
 * @param targetModel Target model for hasMany relation
 * @param definition Optional metadata for setting up hasMany relation
 * @returns {(target:any, key:string)}
 */
function hasMany(targetModel, definition) {
    // todo(shimks): extract out common logic (such as @property.array) to
    // @relation
    return function (target, key) {
        model_decorator_1.property.array(targetModel)(target, key);
        const defaultFkName = lodash_1.camelCase(target.constructor.name + '_id');
        const hasKeyTo = definition && definition.keyTo;
        const hasDefaultFkProperty = targetModel.definition &&
            targetModel.definition.properties &&
            targetModel.definition.properties[defaultFkName];
        if (!(hasKeyTo || hasDefaultFkProperty)) {
            // note(shimks): should we also check for the existence of explicitly
            // given foreign key name on the juggler definition?
            throw new Error(`foreign key ${defaultFkName} not found on ${targetModel.name} model's juggler definition`);
        }
        const meta = { keyTo: defaultFkName };
        Object.assign(meta, definition, { type: RelationType.hasMany });
        context_1.PropertyDecoratorFactory.createDecorator(exports.RELATIONS_KEY, meta)(target, key);
    };
}
exports.hasMany = hasMany;
/**
 * Decorator for embedsOne
 * @param definition
 * @returns {(target:any, key:string)}
 */
function embedsOne(definition) {
    const rel = Object.assign({ type: RelationType.embedsOne }, definition);
    return context_1.PropertyDecoratorFactory.createDecorator(exports.RELATIONS_KEY, rel);
}
exports.embedsOne = embedsOne;
/**
 * Decorator for embedsMany
 * @param definition
 * @returns {(target:any, key:string)}
 */
function embedsMany(definition) {
    const rel = Object.assign({ type: RelationType.embedsMany }, definition);
    return context_1.PropertyDecoratorFactory.createDecorator(exports.RELATIONS_KEY, rel);
}
exports.embedsMany = embedsMany;
/**
 * Decorator for referencesOne
 * @param definition
 * @returns {(target:any, key:string)}
 */
function referencesOne(definition) {
    const rel = Object.assign({ type: RelationType.referencesOne }, definition);
    return context_1.PropertyDecoratorFactory.createDecorator(exports.RELATIONS_KEY, rel);
}
exports.referencesOne = referencesOne;
/**
 * Decorator for referencesMany
 * @param definition
 * @returns {(target:any, key:string)}
 */
function referencesMany(definition) {
    const rel = Object.assign({ type: RelationType.referencesMany }, definition);
    return context_1.PropertyDecoratorFactory.createDecorator(exports.RELATIONS_KEY, rel);
}
exports.referencesMany = referencesMany;
//# sourceMappingURL=relation.decorator.js.map