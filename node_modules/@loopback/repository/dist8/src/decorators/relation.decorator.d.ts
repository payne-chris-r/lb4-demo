import { Class } from '../common-types';
import { Entity } from '../model';
export declare enum RelationType {
    belongsTo = "belongsTo",
    hasOne = "hasOne",
    hasMany = "hasMany",
    embedsOne = "embedsOne",
    embedsMany = "embedsMany",
    referencesOne = "referencesOne",
    referencesMany = "referencesMany"
}
export declare const RELATIONS_KEY = "loopback:relations";
export declare class RelationMetadata {
    type: RelationType;
    target: string | Class<Entity>;
    as: string;
}
export interface RelationDefinitionBase {
    type: RelationType;
}
export interface HasManyDefinition extends RelationDefinitionBase {
    type: RelationType.hasMany;
    keyTo: string;
}
/**
 * Decorator for relations
 * @param definition
 * @returns {(target:any, key:string)}
 */
export declare function relation(definition?: Object): PropertyDecorator;
/**
 * Decorator for belongsTo
 * @param definition
 * @returns {(target:any, key:string)}
 */
export declare function belongsTo(definition?: Object): PropertyDecorator;
/**
 * Decorator for hasOne
 * @param definition
 * @returns {(target:any, key:string)}
 */
export declare function hasOne(definition?: Object): PropertyDecorator;
/**
 * Decorator for hasMany
 * Calls property.array decorator underneath the hood and infers foreign key
 * name from target model name unless explicitly specified
 * @param targetModel Target model for hasMany relation
 * @param definition Optional metadata for setting up hasMany relation
 * @returns {(target:any, key:string)}
 */
export declare function hasMany<T extends typeof Entity>(targetModel: T, definition?: Partial<HasManyDefinition>): (target: Object, key: string) => void;
/**
 * Decorator for embedsOne
 * @param definition
 * @returns {(target:any, key:string)}
 */
export declare function embedsOne(definition?: Object): PropertyDecorator;
/**
 * Decorator for embedsMany
 * @param definition
 * @returns {(target:any, key:string)}
 */
export declare function embedsMany(definition?: Object): PropertyDecorator;
/**
 * Decorator for referencesOne
 * @param definition
 * @returns {(target:any, key:string)}
 */
export declare function referencesOne(definition?: Object): PropertyDecorator;
/**
 * Decorator for referencesMany
 * @param definition
 * @returns {(target:any, key:string)}
 */
export declare function referencesMany(definition?: Object): PropertyDecorator;
