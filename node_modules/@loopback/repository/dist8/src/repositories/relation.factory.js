"use strict";
// Copyright IBM Corp. 2017,2018. All Rights Reserved.
// Node module: @loopback/example-todo
// This file is licensed under the MIT License.
// License text available at https://opensource.org/licenses/MIT
Object.defineProperty(exports, "__esModule", { value: true });
const relation_repository_1 = require("./relation.repository");
/**
 * Enforces a constraint on a repository based on a relationship contract
 * between models. For example, if a Customer model is related to an Order model
 * via a HasMany relation, then, the relational repository returned by the
 * factory function would be constrained by a Customer model instance's id(s).
 *
 * @param relationMeta The relation metadata used to describe the
 * relationship and determine how to apply the constraint.
 * @param targetRepo The repository which represents the target model of a
 * relation attached to a datasource.
 * @returns The factory function which accepts a foreign key value to constrain
 * the given target repository
 */
function createHasManyRepositoryFactory(relationMetadata, targetRepository) {
    return function (fkValue) {
        const fkName = relationMetadata.keyTo;
        if (!fkName) {
            throw new Error('The foreign key property name (keyTo) must be specified');
        }
        // tslint:disable-next-line:no-any
        const constraint = { [fkName]: fkValue };
        return new relation_repository_1.DefaultHasManyEntityCrudRepository(targetRepository, constraint);
    };
}
exports.createHasManyRepositoryFactory = createHasManyRepositoryFactory;
//# sourceMappingURL=relation.factory.js.map