"use strict";
// Copyright IBM Corp. 2017,2018. All Rights Reserved.
// Node module: @loopback/repository
// This file is licensed under the MIT License.
// License text available at https://opensource.org/licenses/MIT
Object.defineProperty(exports, "__esModule", { value: true });
const legacy_juggler_bridge_1 = require("../repositories/legacy-juggler-bridge");
const context_1 = require("@loopback/context");
/**
 * A mixin class for Application that creates a .repository()
 * function to register a repository automatically. Also overrides
 * component function to allow it to register repositories automatically.
 *
 * ```ts
 *
 * class MyApplication extends RepositoryMixin(Application) {}
 * ```
 *
 * Please note: the members in the mixin function are documented in a dummy class
 * called <a href="#RepositoryMixinDoc">RepositoryMixinDoc</a>
 *
 */
// tslint:disable-next-line:no-any
function RepositoryMixin(superClass) {
    return class extends superClass {
        // A mixin class has to take in a type any[] argument!
        // tslint:disable-next-line:no-any
        constructor(...args) {
            super(...args);
        }
        /**
         * Add a repository to this application.
         *
         * @param repo The repository to add.
         *
         * ```ts
         *
         * class NoteRepo {
         *   model: any;
         *
         *   constructor() {
         *     const ds: juggler.DataSource = new juggler.DataSource({
         *       name: 'db',
         *       connector: 'memory',
         *     });
         *
         *     this.model = ds.createModel(
         *       'note',
         *       {title: 'string', content: 'string'},
         *       {}
         *     );
         *   }
         * };
         *
         * app.repository(NoteRepo);
         * ```
         */
        // tslint:disable-next-line:no-any
        repository(repo) {
            const repoKey = `repositories.${repo.name}`;
            this.bind(repoKey)
                .toClass(repo)
                .tag('repository');
        }
        /**
         * Retrieve the repository instance from the given Repository class
         *
         * @param repo The repository class to retrieve the instance of
         */
        // tslint:disable-next-line:no-any
        async getRepository(repo) {
            return await this.get(`repositories.${repo.name}`);
        }
        /**
         * Add the dataSource to this application.
         *
         * @param dataSource The dataSource to add.
         * @param name The binding name of the datasource; defaults to dataSource.name
         *
         * ```ts
         *
         * const ds: juggler.DataSource = new juggler.DataSource({
         *   name: 'db',
         *   connector: 'memory',
         * });
         *
         * app.dataSource(ds);
         *
         * // The datasource can be injected with
         * constructor(@inject('datasources.db') protected datasource: DataSourceType) {
         *
         * }
         * ```
         */
        dataSource(dataSource, name) {
            // We have an instance of
            if (dataSource instanceof legacy_juggler_bridge_1.juggler.DataSource) {
                const key = `datasources.${name || dataSource.name}`;
                this.bind(key)
                    .to(dataSource)
                    .tag('datasource');
            }
            else if (typeof dataSource === 'function') {
                const key = `datasources.${name ||
                    dataSource.dataSourceName ||
                    dataSource.name}`;
                this.bind(key)
                    .toClass(dataSource)
                    .tag('datasource')
                    .inScope(context_1.BindingScope.SINGLETON);
            }
            else {
                throw new Error('not a valid DataSource.');
            }
        }
        /**
         * Add a component to this application. Also mounts
         * all the components repositories.
         *
         * @param component The component to add.
         *
         * ```ts
         *
         * export class ProductComponent {
         *   controllers = [ProductController];
         *   repositories = [ProductRepo, UserRepo];
         *   providers = {
         *     [AUTHENTICATION_STRATEGY]: AuthStrategy,
         *     [AUTHORIZATION_ROLE]: Role,
         *   };
         * };
         *
         * app.component(ProductComponent);
         * ```
         */
        component(component) {
            super.component(component);
            this.mountComponentRepository(component);
        }
        /**
         * Get an instance of a component and mount all it's
         * repositories. This function is intended to be used internally
         * by component()
         *
         * @param component The component to mount repositories of
         */
        mountComponentRepository(component) {
            const componentKey = `components.${component.name}`;
            const compInstance = this.getSync(componentKey);
            if (compInstance.repositories) {
                for (const repo of compInstance.repositories) {
                    this.repository(repo);
                }
            }
        }
    };
}
exports.RepositoryMixin = RepositoryMixin;
/**
 * A dummy class created to generate the tsdoc for the members in repository
 * mixin. Please don't use it.
 *
 * The members are implemented in function
 * <a href="#RepositoryMixin">RepositoryMixin</a>
 */
class RepositoryMixinDoc {
    // tslint:disable-next-line:no-any
    constructor(...args) {
        throw new Error('This is a dummy class created for apidoc!' + 'Please do not use it!');
    }
    /**
     * Add a repository to this application.
     *
     * @param repo The repository to add.
     *
     * ```ts
     *
     * class NoteRepo {
     *   model: any;
     *
     *   constructor() {
     *     const ds: juggler.DataSource = new juggler.DataSource({
     *       name: 'db',
     *       connector: 'memory',
     *     });
     *
     *     this.model = ds.createModel(
     *       'note',
     *       {title: 'string', content: 'string'},
     *       {}
     *     );
     *   }
     * };
     *
     * app.repository(NoteRepo);
     * ```
     */
    // tslint:disable-next-line:no-any
    repository(repo) { }
    /**
     * Retrieve the repository instance from the given Repository class
     *
     * @param repo The repository class to retrieve the instance of
     */
    // tslint:disable-next-line:no-any
    async getRepository(repo) {
        return new repo();
    }
    /**
     * Add the dataSource to this application.
     *
     * @param dataSource The dataSource to add.
     * @param name The binding name of the datasource; defaults to dataSource.name
     *
     * ```ts
     *
     * const ds: juggler.DataSource = new juggler.DataSource({
     *   name: 'db',
     *   connector: 'memory',
     * });
     *
     * app.dataSource(ds);
     *
     * // The datasource can be injected with
     * constructor(@inject('datasources.db') protected datasource: DataSourceType) {
     *
     * }
     * ```
     */
    dataSource(dataSource, name) { }
    /**
     * Add a component to this application. Also mounts
     * all the components repositories.
     *
     * @param component The component to add.
     *
     * ```ts
     *
     * export class ProductComponent {
     *   controllers = [ProductController];
     *   repositories = [ProductRepo, UserRepo];
     *   providers = {
     *     [AUTHENTICATION_STRATEGY]: AuthStrategy,
     *     [AUTHORIZATION_ROLE]: Role,
     *   };
     * };
     *
     * app.component(ProductComponent);
     * ```
     */
    component(component) { }
    /**
     * Get an instance of a component and mount all it's
     * repositories. This function is intended to be used internally
     * by component()
     *
     * @param component The component to mount repositories of
     */
    mountComponentRepository(component) { }
}
exports.RepositoryMixinDoc = RepositoryMixinDoc;
//# sourceMappingURL=repository.mixin.js.map