"use strict";
// Copyright IBM Corp. 2018. All Rights Reserved.
// Node module: @loopback/boot
// This file is licensed under the MIT License.
// License text available at https://opensource.org/licenses/MIT
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("util");
const glob = util_1.promisify(require('glob'));
/**
 * Returns all files matching the given glob pattern relative to root
 *
 * @param pattern A glob pattern
 * @param root Root folder to start searching for matching files
 * @returns {string[]} Array of discovered files
 */
async function discoverFiles(pattern, root) {
    return await glob(pattern, { root: root });
}
exports.discoverFiles = discoverFiles;
/**
 * Given a function, returns true if it is a class, false otherwise.
 *
 * @param target The function to check if it's a class or not.
 * @returns {boolean} True if target is a class. False otherwise.
 */
// tslint:disable-next-line:no-any
function isClass(target) {
    return (typeof target === 'function' && target.toString().indexOf('class') === 0);
}
exports.isClass = isClass;
/**
 * Returns an Array of Classes from given files. Works by requiring the file,
 * identifying the exports from the file by getting the keys of the file
 * and then testing each exported member to see if it's a class or not.
 *
 * @param files An array of string of absolute file paths
 * @returns {Constructor<{}>[]} An array of Class constructors from a file
 */
function loadClassesFromFiles(files) {
    const classes = [];
    for (const file of files) {
        const moduleObj = require(file);
        // WORKAROUND: use `for in` instead of Object.values().
        // See https://github.com/nodejs/node/issues/20278
        for (const k in moduleObj) {
            const exported = moduleObj[k];
            if (isClass(exported)) {
                classes.push(exported);
            }
        }
    }
    return classes;
}
exports.loadClassesFromFiles = loadClassesFromFiles;
//# sourceMappingURL=booter-utils.js.map