"use strict";
// Copyright IBM Corp. 2018. All Rights Reserved.
// Node module: @loopback/openapi-v3
// This file is licensed under the MIT License.
// License text available at https://opensource.org/licenses/MIT
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Generate the `type` and `format` property in a Schema Object according to a
 * parameter's type.
 * `type` and `format` will be preserved if provided in `schema`
 *
 * @private
 * @param type The JavaScript type of a parameter
 * @param schema The schema object provided in an parameter object
 */
function getSchemaForParam(type, schema) {
    schema = schema || {};
    // preserve `type` and `format` provided by user
    if (schema.type && schema.format)
        return schema;
    let typeAndFormat = {};
    if (type === String) {
        typeAndFormat.type = 'string';
    }
    else if (type === Number) {
        typeAndFormat.type = 'number';
    }
    else if (type === Boolean) {
        typeAndFormat.type = 'boolean';
    }
    else if (type === Array) {
        // item type cannot be inspected
        typeAndFormat.type = 'array';
    }
    else if (type === Object) {
        typeAndFormat.type = 'object';
    }
    if (typeAndFormat.type && !schema.type)
        schema.type = typeAndFormat.type;
    if (typeAndFormat.format && !schema.format)
        schema.format = typeAndFormat.format;
    return schema;
}
exports.getSchemaForParam = getSchemaForParam;
/**
 * Get OpenAPI Schema for a JavaScript type for a body parameter
 *
 * @private
 * @param type The JavaScript type of an argument deccorated by @requestBody
 */
function getSchemaForRequestBody(type) {
    let generatedSchema = getSchemaForParam(type);
    if (!generatedSchema.type)
        generatedSchema.$ref = '#/components/schemas/' + type.name;
    return generatedSchema;
}
exports.getSchemaForRequestBody = getSchemaForRequestBody;
//# sourceMappingURL=generate-schema.js.map